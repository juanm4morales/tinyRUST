Start ::= ClaseR Main {ast=new AST(Main.nodo)}
        | Main {ast=new AST(Main.nodo)}

ClaseR ::= Clase ClaseR {ast.addClass(Clase.nodo);}
        | Clase {ast.addClass(Clase.nodo);}

Main ::= "fn" "main" "(" ")" BloqueMetodo {ST.currentMethod=ST.main;
            main = MethodNode(BloqueMetodo.nodo);}

Clase ::= "class" "idClase" Clase_1
            {ClassEntry c = new ClassEntry("idClase".lex,true);
            if (ST.classTable.addClass(c)=!= null) error; ST.currentClass=c;
            Clase1.nodo = new ClassNode("idClase");}

Clase_1 ::= Herencia "{" Clase_2 {Clase_2.nodo = Clase_1.nodo;}
        | "{" Clase_2 {ClassEntry c = ST.classTable.get("Object");
            ST.currentClass.setInheritance(c):}

Clase_2 ::= MiembroR "}" {MiembroR.nodo = Clase_2.nodo;}
        | "}" {}

MiembroR ::= Miembro MiembroR2 {Miembro.nodo=MiembroR.nodo;
            MiembroR2.nodo=MiembroR.nodo;}
        | Miembro {Miembro.nodo=MiembroR.nodo}

Herencia ::= ":" "idClase" {ClassEntry c = ST.classTable.get("idClase".lex);
            ST.currentClass.setInheritance(c);}

Miembro ::= Atributo {}
        | Constructor {Miembro.nodo.addMethod(Constructor.nodo)}
        | Metodo {Miembro.nodo.addMethod(Metodo.nodo)}

Atributo ::= Visibilidad Tipo ":" ListaDeclVar ";"
            {ListaDeclVar.pub = true; ListaDeclVar.tipo = Tipo.tipo;
            ListaDeclVar.atributo = true;}
        | Tipo ":" ListaDeclVar ";"
            {ListaDeclVar.pub = false; ListaDeclVar.tipo = Tipo.tipo;
            ListaDeclVar.atributo = true;}

Constructor ::= "create" ArgsFormales BloqueMetodo
            {ConstructorEntry co = new ConstructorEntry(ST.currentClass.id);
            ST.currentMethod=co;
            constr=new MethodNode(ST.currentClass.id, BloqueMetodo.nodo);
            Constructor.nodo = constr;}

Metodo ::= FormaMetodo "fn" "id" ArgsFormales "->" TipoMetodo BloqueMetodo
            {MethodEntry m = new MethodEntry("id".lex, TipoMetodo.tipo, true);
            if (ST.currentClass.addMethod(m)!=null) error; ST.currentMethod=m;
             m.setReturnType(TipoMetodo.tipo);
            m=new MethodNode("id", BloqueMetodo.nodo); Metodo.nodo=m;}
        | "fn" "id" ArgsFormales "->" TipoMetodo  BloqueMetodo
            {MethodEntry m = new MethodEntry("id".lex, TipoMetodo.tipo, false);
            ST.currentClass.addMethod(m); ST.currentMethod=m;
            m.setReturnType(TipoMetodo.tipo);
            m=new MethodNode("id", BloqueMetodo.nodo); Metodo.nodo=m;}

ArgsFormales ::= "(" ArgsFormales_1 {}

ArgsFormales_1 ::= ListaArgsFormales ")" {}
        | ")" {}

ListaArgsFormales ::= ArgFormal {}
        | ArgFormal "," ListaArgsFormales {}

ArgFormal ::= Tipo ":" "id"
            {if (ST.currentMethod.addParameter(
            new ParameterEntry("id".lex, Tipo.tipo)))!=null error;}

FormaMetodo ::= "static" {}

Visibilidad ::= "pub" {}

TipoMetodo ::= Tipo {TipoMetodo.tipo = Tipo.tipo}
        | "void" {TipoMetodo.tipo = "void".lex}

Tipo ::= TipoPrimitivo {Tipo.tipo = TipoPrimitivo.tipo}
        | TipoReferencia {Tipo.tipo = TipoReferencia.tipo}
        | TipoArray {Tipo.tipo = TipoArray.tipo}

TipoPrimitivo ::= "Bool" {TipoPrimitivo.tipo = new PrimitiveType("Bool");}
        | "I32" {TipoPrimitivo.tipo = new PrimitiveType("I32");}
        | "Str" {TipoPrimitivo.tipo = new PrimitiveType("Str");}
        | "Char" {TipoPrimitivo.tipo = new PrimitiveType("Char");}

TipoReferencia ::= "idClase"
        {TipoReferencia.type = new ReferenceType("idClase".lex)};

TipoArray ::= "Array" TipoPrimitivo
        {TipoArray.tipo = new ArrayType(TipoPrimitivo.tipo)}

ListaDeclVar ::= "id" {if (ListaDeclVar.attr) {
            if (ST.currentClass.addVariable(new AttributeEntry(
            "id".lex, ListaDeclVar.tipo))!=null) error;}
            else {if (ST.currentMethod.addVariable(
            new VarEntry("id".lex, ListaDeclVar.tipo))!=null) error;}}
        | "id" "," ListaDeclVar2 {if (ListaDeclVar.attr)
            {if (ST.currentClass.addVariable(new AttributeEntry(
            "id".lex, ListaDeclVar.tipo))!=null) error;} else {
            if (ST.currentMethod.addVariable(new VarEntry(
            "id".lex, ListaDeclVar.tipo))!=null) error;}
            ListaDeclVar2.tipo=ListaDeclVar.tipo;
            ListaDeclVar2.pub=ListaDeclVar.pub;
            ListaDeclVar2.attr}

BloqueMetodo ::= "{" BloqueMetodo_1 {BloqueMetodo.nodo = BloqueMetodo_1.nodo;}

BloqueMetodo_1 ::= DeclVarLocalesR BloqueMetodo_2 {b=new BlockNode();
            BloqueMetodo_2.nodo = b; BloqueMetodo_1.nodo = b;}
        | SentenciaR "}" {b=new BlockNode(); SentenciaR.nodo=b;
            BloqueMetodo_1.nodo=b;}
        | "}" {b=new BlockNode(); BloqueMetodo_1.nodo;}

BloqueMetodo_2 ::= SentenciaR "}" {SentenciaR.nodo=BloqueMetodo_2.nodo;}
        | "}" {}

DeclVarLocalesR ::= DeclVarLocales DeclVarLocalesR {}
        | DeclVarLocales {}

SentenciaR ::= Sentencia SentenciaR2 {SentenciaR.addSentence(Sentencia.nodo);
            SentenciaR2.nodo=SentenciaR.nodo;}
        | Sentencia {SentenciaR.addSentence(Sentencia.nodo);}

DeclVarLocales ::= Tipo ":" ListaDeclVar ";"
            {ListaDeclVar.tipo=Tipo.tipo; ListaDeclVar.atributo=false;
            ListaDeclVar.pub=false}

Sentencia ::= ";" {}
        | Asignacion ";" {Sentencia.nodo=Asignacion.nodo;}
        | SentSimple ";" {Sentencia.nodo=SentSimple.nodo;}
        | "while" "(" Expresion ")" Sentencia
            {wh=new WhileNode(Expresion.nodo, Sentencia.nodo);
            Sentencia.nodo=wh;}
        | Bloque {Sentencia.nodo = Bloque.nodo;}
        | If {Sentencia.nodo=If.nodo;}
        | "return" Return {Sentencia.nodo=Return.nodo;}

If ::= "if" "(" Expresion ")" Sentencia Else {ifelse=
            new ifElseNode(Expresion.nodo, Sentencia.nodo, Else.nodo);
            If.nodo = ifelse;}
        | "if" "(" Expresion ")" Sentencia {if=
            new ifElseNode(Expresion.nodo, Sentencia.nodo); If.nodo = ifelse;}

Else ::= "else" Sentencia {Else.nodo=Sentencia.nodo;}

Return ::= Expresion ";" {r=new ReturnNode(Expresion.nodo); Return.nodo=r;}
        | ";" {r=new ReturnNode(); Return.nodo=r;}

Bloque ::= "{" Bloque_1 {Bloque.nodo=Bloque_1.nodo;}

Bloque_1 ::= SentenciaR "}" {b=new BlockNode(); SentenciaR.nodo=b;
            Bloque_1.nodo=b;}
        | "}" {b=new BlockNode(); Bloque_1.nodo=b;}

Asignacion ::= AsignVarSimple "=" Expresion
            {a=new AssignNode(AsignVarSimple.nodo, Expresion.nodo);
            Asignacion.nodo=a;}
        | AsignSelfSimple "=" Expresion
            {a=new AssignNode(AsignSelfSimple.nodo, Expresion.nodo);
            Asignacion.nodo=a;}

AsignVarSimple ::= "id" AsignVarSimple_1 {var=VarNode("id");
        AsignVarSimple.nodo=var;}

AsignVarSimple_1 ::= EncadenadoSimpleR
            {AsignVarSimple_1.nodo.encadenado = EncadenadoSimpleR.nodo}
        | "[" Expresion "]" {AsignVarSimple_1.nodo.index=Expresion.nodo;}


AsignSelfSimple ::= "self" EncadenadoSimpleR {s=VarNode("self");
            s.chain=EncadenadoSimpleR.nodo; AsignSelfSimple.nodo=}

EncadenadoSimpleR ::= EncadenadoSimple EncadenadoSimpleR2
            {EncadenadoSimple.nodo.encadenado=EncadenadoSimpleR2.nodo;
             EncadenadoSimpleR.nodo=EncadenadoSimple.nodo;}
        | EncadenadoSimple {EncadenadoSimpleR.nodo=EncadenadoSimple.nodo;}

EncadenadoSimple ::= "." "id" {EncadenadoSimple.nodo=new VarNode("id");}

SentSimple ::= "(" Expresion ")"  {SentSimple.nodo=Expresion.nodo;}

Expresion ::= ExpAnd ExpresionRD {ls=ExpAnd.nodo; orExp=ExpresionRD.nodo;
            orExp.leftSide=ls; Expresion.nodo=orExp;}
        | ExpAnd {ls=ExpAnd.nodo; Expresion.nodo=ls;}

ExpresionRD ::= "||" ExpAnd ExpresionRD2 {orExp=new BinExpNode("||");
            rs=ExpresionRD2.nodo; rs.leftSide=ExpAnd.nodoM; orExp.rightSide=rs;
            ExpresionRD.nodo=orExp;}
        | "||" ExpAnd {orExp=new BinExpNode("||"); orExp.rightSide=ExpAnd.nodo;
            ExpresionRD.nodo=orExp;}

ExpAnd ::= ExpIgual ExpAndRD {ls=ExpIgual.nodo; andExp=ExpAndRD.nodo
            ; andExp.leftSide=ls; ExpAnd.nodo=andExp;}
        | ExpIgual {ls=ExpIgual.nodo; ExpAnd.nodo=ls;}

ExpAndRD ::= "&&" ExpIgual ExpAndRD2 {andExp=new BinExpNode("&&");
            rs=ExpAndRD2.nodo; rs.leftSide=ExpIgual.nodo; andExp.rightSide=rs;
            ExpAndRD.nodo=andExp;}
        | "&&" ExpIgual {andExp=new BinExpNode("&&");
            andExp.rightSide=ExpAnd.nodo; ExpresionRD.nodo=andExp;}

ExpIgual ::= ExpCompuesta ExpIgualRD {ls=ExpCompuesta.nodo;
            eqExp=ExpIgualRD.nodo; eqExp.leftSide=ls; ExpIgual.nodo=eqExp;}
        | ExpCompuesta {ls=ExpCompuesta.nodo; ExpIgual.nodo=ls;}

ExpIgualRD ::= OpIgual ExpCompuesta ExpIgualRD2
            {eqExp=new BinExpNode(OpIgual.token); rs=ExpIgualRD2.nodo;
            rs.leftSide=ExpCompuesta.nodo; eqExp.rightSide=rs;
            ExpIgualRD.nodo=eqExp;}
        | OpIgual ExpCompuesta {eqExp=new BinExpNode(OpIgual.token);
            eqExp.rightSide=ExpCompuesta.nodo; ExpIgualRD.nodo=eqExp;}

ExpCompuesta ::= ExpAdd1 OpCompuesto ExpAdd2
            {compExp=new BinExpNode(OpCompuesto.token);
            compExp.leftSide=ExpAdd1.nodo; compExp.rightSide=ExpAdd2.nodo;
            ExpCompuesta.nodo=compExp;}
        | ExpAdd {ExpCompuesta.nodo=ExpAdd.nodo;}

ExpAdd ::= ExpMul ExpAddRD {ls=ExpMul.nodo; addExp=ExpAddRD.nodo;
            addExp.leftSide=ls; ExpAdd.nodo=addExp;}
        | ExpMul {ExpAdd.nodo=ExpMul.nodo;}

ExpAddRD ::= OpAdd ExpMul ExpAddRD2 {addExp=new BinExpNode(OpAdd.token);
            rs=ExpAddRD2.nodo; rs.leftSide=ExpMul.nodo; addExp.rightSide=rs;
            ExpAddRD.nodo=addExp;}
        | OpAdd ExpMul {addExp=newBineExpNode(OpAdd.token);
            addExp.rightSide=ExpMul.nodo; ExpAddRD.nodo=addExp;}

ExpMul ::= ExpUn ExpMulRD {ls=ExpUn.nodo; multExp=ExpMulRD.nodo;
            multExp.leftSide=ls; ExpMul.nodo=multExp;}
        | ExpUn {ExpMult.nodo=ExpUn.nodo;}

ExpMulRD ::= OpMul ExpUn ExpMulRD2 {multExp=new BinExpNode(OpMul.token);
            rs=ExpMulRD2.nodo; rs.leftSide=ExpUn.nodo; multExp.rightSide=rs;
            ExpMulRD.nodo=multExp;}
        | OpMul ExpUn {multExp=new BinExpNode(OpMul.token);
            multExp.rightSide=ExpUn.nodo; ExpMulRD.nodo=multExp;}

ExpUn ::= OpUnario ExpUn2 {unExp=new UnExpNode(OpUnario.token);
            unExp.rightSide=ExpUn2.nodo; ExpUn.nodo=unExp;}
        | Operando {ExpUn.nodo=Operando.nodo}

OpIgual ::= "==" {OpIgual.token="==";}
        | "!=" {OpIgual.token="=!";}

OpCompuesto ::= "<" {OpCompuesto.token="<";}
        | ">" {OpCompuesto.token=">";}
        | "<=" {OpCompuesto.token="<=";}
        | ">=" {OpCompuesto.token=">=";}

OpAdd ::= "+" {OpAdd.token="+";}
        | "-" {OpAdd.token="-";}

OpUnario ::= "+" {OpUnario.token="+"}
        | "-" {OpUnario.token=""}
        | "!" {OpUnario.token="!"}

OpMul ::= "*" {OpMul.token="*"}
        | "/" {OpMul.token="/"}
        | "%" {OpMul.token="%"}

Operando ::= Literal {Operando.nodo=Literal.nodo}
        | Primario Encadenado {Primario.nodo.chain=Encadenado.nodo;
            Operando.nodo=Primario.nodo;}
        | Primario {Operando.nodo=Primario.nodo;}

Literal ::= "nil" {t new PrimitiveType("nil"); l=new LiteralNode("nil", t);
            Literal.nodo=l;}
        | "true" {t = new PrimitiveType("Bool"); l=new LiteralNode("Bool", t);
            Literal.nodo=l;}
        | "false" {t = new PrimitiveType("Bool"); l=new LiteralNode("Bool", t);
            Literal.nodo=l;}
        | "intLiteral" {t = new PrimitiveType("I32");
            l=new LiteralNode("I32", t); Literal.nodo=l;}
        | "stringLiteral" {t = new PrimitiveType("Str");
            l=new LiteralNode("Str", t); Literal.nodo=l;}
        | "charLiteral" {t = new PrimitiveType("Char");
            l=new LiteralNode("niCharl", t); Literal.nodo=l;}

Primario ::= ExprPar {Primario.nodo=ExprPar.nodo;}
        | AccesoSelf {Primario.nodo=AccesoSelf.nodo;}
        | VarOMet {Primario.nodo=VarOMet.nodo;}
        | LlamadaMetEst {Primario.nodo=LlamadaMetEst.nodo;}
        | LLamadaConst {Primario.nodo=LLamadaConst.nodo;}

ExprPar ::= "(" Expresion ")" Encadenado
            {Expresion.nodo.encadenado = Encadenado.nodo;
            ExprPar.nodo=Expresion.nodo}
        | "(" Expresion ")" {ExpPar.nodo=Expresion.nodo;}

AccesoSelf ::= "self" Encadenado {s=new VarNode("self");
            s.encadenado=Encadenado.nodo; AccesoSelf.nodo=s;}
        | "self" {s=new VarNode("self"); AccesoSelf.nodo=s;}

VarOMet ::= "id" VarOMet_1 {VarOMet_1.token="id"; VarOMet.nodo=VarOMet_1.nodo;}
        | "id" {VarOMet.nodo=new VarNode("id");}

VarOMet_1 ::= Encadenado {v=new VarNode(VarOMet_1.token);
            v.encadenado=Encadenado.nodo; VarOMet_1.nodo=v;}
        | ArgsActuales {c=new CallNode(VarOMet_1.token); ArgsActuales.nodo=c;
            VarOMet_1.nodo=c;}
        | ArgsActuales Encadenado {c=new CallNode(VarOMet_1.token);
            ArgsActuales.nodo=c; c.encadenado=Encadenado.nodo; VarOMet_1.nodo=c;}
        | "[" Expresion "]" {arr=new ArrayNode(VarOMet_1.token);
            arr.indice=Expresion.nodo; VarOMet_1.nodo = arr;}

LlamadaMet ::= "id" ArgsActuales Encadenado
            {m=new CallNode("id"); ArgsActuales.nodo=m;
            m.encadenado=Encadenado.nodo; LlamadaMet.nodo=m;}
        | "id" ArgsActuales
            {m=new CallNode("id"); ArgsActuales.nodo=m; LlamadaMet.nodo=m;}


LlamadaMetEst ::= "idClase" "." LlamadaMet Encadenado
            {sc=new CallNode(); sc.claseMetEst="idClase"; LlamadaMet.nodo=sc;
            sc.encadenado=Encadenado.nodo; LlamadaMetEst.nodo=sc;}
        | "idClase" "." LlamadaMet
            {sc=new CallNode(); sc.claseMetEst="idClase"; LlamadaMet.nodo=sc;
            LlamadaMetEst.nodo=sc; }

LLamadaConst ::= "new" LLamadaConst_1 {LlamadaConst.nodo=LLamadaConst_1.nodo;}

LLamadaConst_1 ::= "idClase" ArgsActuales Encadenado {c=new CallNode("idClase");
            c.isConstructor=trueM; ArgsActuales.nodo=c;
            c.encadenado=Encadenado.nodo; LLamadaConst_1.nodo=c;}
        | "idClase" ArgsActuales {c=new CallNode("idClase");
            c.isConstructor=trueM; ArgsActuales.nodo=c; LLamadaConst_1.nodo=c;}
        | TipoPrimitivo "[" Expresion "]" {arr=new ArrayNode();
            arr.tipo= TipoPrimitivo.tipo; arr.indice=Expresion.nodo;
            LlamadaConst_1.nodo=arr;}

ArgsActuales ::= "(" ArgsActuales_1 {ArgsActuales_1.nodo=ArgsActuales.nodo;}

ArgsActuales_1 ::= ListaExpresiones ")"
            {ListaExpresiones.nodo=ArgsActuales_1.nodo;}

ListaExpresiones ::= Expresion
            {ListaExpresiones.nodo.agregarParam(Expresion.nodo);}
        | Expresion "," ListaExpresiones2
            {ListaExpresiones.nodo.agregarParam(Expresion.nodo);
            ListaExpresiones2.nodo=ListaExpresiones.nodo;}

Encadenado ::= "." Encadenado_1 {Encadenado.nodo=Encadenado_1.nodo;}

Encadenado_1 ::= "id" VarOMet_1 {VarOMet_1.token="id";
            Encadenado_1.nodo=VarOMet_1.nodo;}
        | "id" {Encadenado_1.nodo = new VarNode("id");}
